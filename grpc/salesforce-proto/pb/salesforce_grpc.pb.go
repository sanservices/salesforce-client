// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpc/proto/salesforce.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalesforceService_FireEvent_FullMethodName         = "/salesforce.SalesforceService/FireEvent"
	SalesforceService_CreateSchema_FullMethodName      = "/salesforce.SalesforceService/CreateSchema"
	SalesforceService_SearchSchema_FullMethodName      = "/salesforce.SalesforceService/SearchSchema"
	SalesforceService_GetSchemaFields_FullMethodName   = "/salesforce.SalesforceService/GetSchemaFields"
	SalesforceService_DeleteSchema_FullMethodName      = "/salesforce.SalesforceService/DeleteSchema"
	SalesforceService_UpdateSchemaField_FullMethodName = "/salesforce.SalesforceService/UpdateSchemaField"
	SalesforceService_InsertRows_FullMethodName        = "/salesforce.SalesforceService/InsertRows"
	SalesforceService_SendEmail_FullMethodName         = "/salesforce.SalesforceService/SendEmail"
	SalesforceService_CheckInsertRows_FullMethodName   = "/salesforce.SalesforceService/CheckInsertRows"
)

// SalesforceServiceClient is the client API for SalesforceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service
type SalesforceServiceClient interface {
	FireEvent(ctx context.Context, in *FireEventRequest, opts ...grpc.CallOption) (*FireEventResponse, error)
	CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error)
	SearchSchema(ctx context.Context, in *SearchSchemaRequest, opts ...grpc.CallOption) (*SearchSchemaResponse, error)
	GetSchemaFields(ctx context.Context, in *SearchSchemaIdRequest, opts ...grpc.CallOption) (*SearchSchemaIdResponse, error)
	DeleteSchema(ctx context.Context, in *SearchSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error)
	UpdateSchemaField(ctx context.Context, in *SearchSchemaRequest, opts ...grpc.CallOption) (*SearchSchemaResponse, error)
	InsertRows(ctx context.Context, in *InsertRowsRequest, opts ...grpc.CallOption) (*InsertRowsResponse, error)
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	CheckInsertRows(ctx context.Context, in *CheckInsertRowsRequest, opts ...grpc.CallOption) (*CheckInsertRowsResponse, error)
}

type salesforceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesforceServiceClient(cc grpc.ClientConnInterface) SalesforceServiceClient {
	return &salesforceServiceClient{cc}
}

func (c *salesforceServiceClient) FireEvent(ctx context.Context, in *FireEventRequest, opts ...grpc.CallOption) (*FireEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FireEventResponse)
	err := c.cc.Invoke(ctx, SalesforceService_FireEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSchemaResponse)
	err := c.cc.Invoke(ctx, SalesforceService_CreateSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) SearchSchema(ctx context.Context, in *SearchSchemaRequest, opts ...grpc.CallOption) (*SearchSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSchemaResponse)
	err := c.cc.Invoke(ctx, SalesforceService_SearchSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetSchemaFields(ctx context.Context, in *SearchSchemaIdRequest, opts ...grpc.CallOption) (*SearchSchemaIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSchemaIdResponse)
	err := c.cc.Invoke(ctx, SalesforceService_GetSchemaFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) DeleteSchema(ctx context.Context, in *SearchSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSchemaResponse)
	err := c.cc.Invoke(ctx, SalesforceService_DeleteSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateSchemaField(ctx context.Context, in *SearchSchemaRequest, opts ...grpc.CallOption) (*SearchSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSchemaResponse)
	err := c.cc.Invoke(ctx, SalesforceService_UpdateSchemaField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) InsertRows(ctx context.Context, in *InsertRowsRequest, opts ...grpc.CallOption) (*InsertRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertRowsResponse)
	err := c.cc.Invoke(ctx, SalesforceService_InsertRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, SalesforceService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CheckInsertRows(ctx context.Context, in *CheckInsertRowsRequest, opts ...grpc.CallOption) (*CheckInsertRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInsertRowsResponse)
	err := c.cc.Invoke(ctx, SalesforceService_CheckInsertRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesforceServiceServer is the server API for SalesforceService service.
// All implementations must embed UnimplementedSalesforceServiceServer
// for forward compatibility.
//
// Define the service
type SalesforceServiceServer interface {
	FireEvent(context.Context, *FireEventRequest) (*FireEventResponse, error)
	CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error)
	SearchSchema(context.Context, *SearchSchemaRequest) (*SearchSchemaResponse, error)
	GetSchemaFields(context.Context, *SearchSchemaIdRequest) (*SearchSchemaIdResponse, error)
	DeleteSchema(context.Context, *SearchSchemaRequest) (*DeleteSchemaResponse, error)
	UpdateSchemaField(context.Context, *SearchSchemaRequest) (*SearchSchemaResponse, error)
	InsertRows(context.Context, *InsertRowsRequest) (*InsertRowsResponse, error)
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	CheckInsertRows(context.Context, *CheckInsertRowsRequest) (*CheckInsertRowsResponse, error)
	mustEmbedUnimplementedSalesforceServiceServer()
}

// UnimplementedSalesforceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSalesforceServiceServer struct{}

func (UnimplementedSalesforceServiceServer) FireEvent(context.Context, *FireEventRequest) (*FireEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireEvent not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedSalesforceServiceServer) SearchSchema(context.Context, *SearchSchemaRequest) (*SearchSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSchema not implemented")
}
func (UnimplementedSalesforceServiceServer) GetSchemaFields(context.Context, *SearchSchemaIdRequest) (*SearchSchemaIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaFields not implemented")
}
func (UnimplementedSalesforceServiceServer) DeleteSchema(context.Context, *SearchSchemaRequest) (*DeleteSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateSchemaField(context.Context, *SearchSchemaRequest) (*SearchSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaField not implemented")
}
func (UnimplementedSalesforceServiceServer) InsertRows(context.Context, *InsertRowsRequest) (*InsertRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRows not implemented")
}
func (UnimplementedSalesforceServiceServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedSalesforceServiceServer) CheckInsertRows(context.Context, *CheckInsertRowsRequest) (*CheckInsertRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInsertRows not implemented")
}
func (UnimplementedSalesforceServiceServer) mustEmbedUnimplementedSalesforceServiceServer() {}
func (UnimplementedSalesforceServiceServer) testEmbeddedByValue()                           {}

// UnsafeSalesforceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesforceServiceServer will
// result in compilation errors.
type UnsafeSalesforceServiceServer interface {
	mustEmbedUnimplementedSalesforceServiceServer()
}

func RegisterSalesforceServiceServer(s grpc.ServiceRegistrar, srv SalesforceServiceServer) {
	// If the following call pancis, it indicates UnimplementedSalesforceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SalesforceService_ServiceDesc, srv)
}

func _SalesforceService_FireEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).FireEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_FireEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).FireEvent(ctx, req.(*FireEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_CreateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateSchema(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_SearchSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).SearchSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_SearchSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).SearchSchema(ctx, req.(*SearchSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetSchemaFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchemaIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetSchemaFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_GetSchemaFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetSchemaFields(ctx, req.(*SearchSchemaIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_DeleteSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).DeleteSchema(ctx, req.(*SearchSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateSchemaField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateSchemaField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_UpdateSchemaField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateSchemaField(ctx, req.(*SearchSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_InsertRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).InsertRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_InsertRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).InsertRows(ctx, req.(*InsertRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CheckInsertRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInsertRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CheckInsertRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalesforceService_CheckInsertRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CheckInsertRows(ctx, req.(*CheckInsertRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SalesforceService_ServiceDesc is the grpc.ServiceDesc for SalesforceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesforceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "salesforce.SalesforceService",
	HandlerType: (*SalesforceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireEvent",
			Handler:    _SalesforceService_FireEvent_Handler,
		},
		{
			MethodName: "CreateSchema",
			Handler:    _SalesforceService_CreateSchema_Handler,
		},
		{
			MethodName: "SearchSchema",
			Handler:    _SalesforceService_SearchSchema_Handler,
		},
		{
			MethodName: "GetSchemaFields",
			Handler:    _SalesforceService_GetSchemaFields_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _SalesforceService_DeleteSchema_Handler,
		},
		{
			MethodName: "UpdateSchemaField",
			Handler:    _SalesforceService_UpdateSchemaField_Handler,
		},
		{
			MethodName: "InsertRows",
			Handler:    _SalesforceService_InsertRows_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _SalesforceService_SendEmail_Handler,
		},
		{
			MethodName: "CheckInsertRows",
			Handler:    _SalesforceService_CheckInsertRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/salesforce.proto",
}
